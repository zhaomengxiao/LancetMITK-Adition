#! 
#! \brief Create a Mitk style plug-in runtime configuration file.
#!
#!
#! This method should be called from the plug-in CMakeList.txt of the app attribute 
#! or product attribute to create the *.provisioning configuration file of the 
#! plug-in runtime.
#!
#! Options:
#!
#! \param RUNTIME_PROVISIONING_PUBLIC_PLUGIN_MAKE Whether to create a public plug-in.
#!
#! Parameters:
#!
#! \param RUNTIME_PROVISIONING_NAME Configuration file name required at runtime.
#! \param RUNTIME_PROVISIONING_SOURCE_DIRECTORY Target generation directory of 
#! 		configuration files required at runtime.
#! \param RUNTIME_PROVISIONING_TARGET_DIRECTORY Target generation directory of 
#! 		configuration files required at runtime.
#!
#! Multi-value parameters (all optional):
#!
#! \param RUNTIME_READ_SUB_PLUGIN_LIST Collection of plug-ins on which the runtime depends.
#! \param RUNTIME_INSTALL_SUB_PLUGIN_LIST Collection of plug-ins on which the runtime depends.
#! \param RUNTIME_START_SUB_PLUGIN_LIST Collection of plug-ins on which the runtime depends.
#! \param RUNTIME_STOP_SUB_PLUGIN_LIST Collection of plug-ins on which the runtime depends.
cmake_minimum_required(VERSION 3.18)
include(${MITK_EXTENSION_DIRS}/CMake/lancetFunctionGetPluginInstallDllPaths.cmake)

function(lancetFunctionCreateMitkProvisioning)

# options
set(arg_options RUNTIME_PROVISIONING_PUBLIC_PLUGIN_MAKE)

# single value arguments
set(arg_single 
RUNTIME_PROVISIONING_NAME
RUNTIME_PROVISIONING_SOURCE_DIRECTORY
RUNTIME_PROVISIONING_TARGET_DIRECTORY
)

# multiple value arguments
set(arg_multiple
RUNTIME_READ_SUB_PLUGIN_LIST
RUNTIME_INSTALL_SUB_PLUGIN_LIST
RUNTIME_START_SUB_PLUGIN_LIST
RUNTIME_STOP_SUB_PLUGIN_LIST
)

cmake_parse_arguments(PROPERTY "${arg_options}" "${arg_single}" "${arg_multiple}" ${ARGN})
# ------------------ Input parameter security check ------------------------------
if(NOT PROPERTY_RUNTIME_PROVISIONING_NAME)
message(SEND_ERROR "RUNTIME_PROVISIONING_NAME is empty!")
return()
endif()

if(NOT PROPERTY_RUNTIME_PROVISIONING_SOURCE_DIRECTORY)
message("Warning RUNTIME_PROVISIONING_SOURCE_DIRECTORY is empty!")
return()
endif()
if(NOT PROPERTY_RUNTIME_PROVISIONING_TARGET_DIRECTORY)
message("Warning RUNTIME_PROVISIONING_TARGET_DIRECTORY is empty!")
return()
endif()

set(__plugin_dll_paths )
if(PROPERTY_RUNTIME_PROVISIONING_PUBLIC_PLUGIN_MAKE)
set(__ctk_install_plugins org.commontk.configadmin org.commontk.eventadmin)
set(__mitk_install_plugins 
  org.blueberry.core.runtime
  org.blueberry.core.expressions
  org.blueberry.core.commands
  org.blueberry.ui.qt
  org.blueberry.ui.qt.help
  org.blueberry.ui.qt.log
  org.mitk.core.services
  org.mitk.gui.common
  org.mitk.planarfigure
  org.mitk.core.ext
  org.mitk.gui.qt.application
  org.mitk.gui.qt.ext
  org.mitk.gui.qt.extapplication
  org.mitk.gui.qt.common
)
#! Public Install plugins
lancetFunctionGetPluginInstallDllPaths(START 
  ${CTK_LIBRARY_DIRS} 
  PROPERTY_RUNTIME_OUT_SUB_PLUGIN_LIST
  ${__ctk_install_plugins}
  )
list(APPEND __plugin_dll_paths ${PROPERTY_RUNTIME_OUT_SUB_PLUGIN_LIST})
lancetFunctionGetPluginInstallDllPaths(START 
  ${PROPERTY_RUNTIME_PROVISIONING_SOURCE_DIRECTORY} 
  PROPERTY_RUNTIME_OUT_SUB_PLUGIN_LIST
  ${__mitk_install_plugins}
  )
list(APPEND __plugin_dll_paths ${PROPERTY_RUNTIME_OUT_SUB_PLUGIN_LIST})
endif()

if(PROPERTY_RUNTIME_READ_SUB_PLUGIN_LIST)
#! READ Install plugins
lancetFunctionGetPluginInstallDllPaths(READ 
  ${PROPERTY_RUNTIME_PROVISIONING_SOURCE_DIRECTORY} 
  PROPERTY_RUNTIME_OUT_SUB_PLUGIN_LIST
  ${PROPERTY_RUNTIME_READ_SUB_PLUGIN_LIST} 
  )
list(APPEND __plugin_dll_paths ${PROPERTY_RUNTIME_OUT_SUB_PLUGIN_LIST})
endif()

if(PROPERTY_RUNTIME_INSTALL_SUB_PLUGIN_LIST)
#! INSTALL Install plugins
lancetFunctionGetPluginInstallDllPaths(INSTALL 
  ${PROPERTY_RUNTIME_PROVISIONING_SOURCE_DIRECTORY} 
  PROPERTY_RUNTIME_OUT_SUB_PLUGIN_LIST
  ${PROPERTY_RUNTIME_INSTALL_SUB_PLUGIN_LIST} 
  )
list(APPEND __plugin_dll_paths ${PROPERTY_RUNTIME_OUT_SUB_PLUGIN_LIST})
endif()

if(PROPERTY_RUNTIME_START_SUB_PLUGIN_LIST)
#! START Install plugins
lancetFunctionGetPluginInstallDllPaths(START 
  ${PROPERTY_RUNTIME_PROVISIONING_SOURCE_DIRECTORY} 
  PROPERTY_RUNTIME_OUT_SUB_PLUGIN_LIST
  ${PROPERTY_RUNTIME_START_SUB_PLUGIN_LIST} 
  )
list(APPEND __plugin_dll_paths ${PROPERTY_RUNTIME_OUT_SUB_PLUGIN_LIST})
endif()
if(PROPERTY_RUNTIME_STOP_SUB_PLUGIN_LIST)
#! STOP Install plugins
lancetFunctionGetPluginInstallDllPaths(STOP 
  ${PROPERTY_RUNTIME_PROVISIONING_SOURCE_DIRECTORY} 
  PROPERTY_RUNTIME_OUT_SUB_PLUGIN_LIST
  ${PROPERTY_RUNTIME_STOP_SUB_PLUGIN_LIST} 
  )
list(APPEND __plugin_dll_paths ${PROPERTY_RUNTIME_OUT_SUB_PLUGIN_LIST})
endif()

set(_provisioning_file ${PROPERTY_RUNTIME_PROVISIONING_TARGET_DIRECTORY}/${PROPERTY_RUNTIME_PROVISIONING_NAME}.provisioning)

FILE(WRITE ${_provisioning_file} "#This file is the workbench running configuration file generated by CMake.\n#\n")

foreach(line ${__plugin_dll_paths})
  FILE(APPEND ${_provisioning_file} "${line}\n")
endforeach()

endfunction()